{"version":3,"sources":["Input.js","Background.js","App.js","serviceWorker.js","index.js","yoda.png"],"names":["Component","Background","handleChange","event","setState","input","target","value","state","output","console","log","this","getInput","urlstr","urlstr2","fetch","getURL","response","json","contents","translated","componentDidMount","className","type","name","onChange","onClick","id","replace","App","src","Yoda","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"kSAGoBA,Y,uBCgELC,E,YA7DX,aAAe,IAAD,8BACV,+CAOJC,aAAe,SAAAC,GACX,EAAKC,SAAS,CAAEC,MAAOF,EAAMG,OAAOC,SAPpC,EAAKC,MAAQ,CACTH,MAAO,GACPI,OAAQ,IAJF,E,wEAeV,OADAC,QAAQC,IAAIC,KAAKJ,MAAMH,OAChBO,KAAKJ,MAAMH,Q,+BAIlBO,KAAKC,WACL,IAAIC,EAAS,4DAA4DF,KAAKJ,MAAMH,MAChFU,EAAU,6DAA6DH,KAAKJ,MAAMH,MAAM,IAE5F,OADAK,QAAQC,IAAIG,GACLC,I,4KAKPC,MAAMJ,KAAKK,U,cADLC,E,gBAEaA,EAASC,O,OAAtBA,E,OAGNP,KAAKR,SAAS,CAAEK,OAAQU,EAAKC,SAASC,a,sIAItCT,KAAKU,sB,+BAGC,IAAD,OACL,OACA,yBAAKC,UAAU,UACX,6BACA,8BACI,4CACU,6BACV,2BAAOC,KAAK,OAAOC,KAAK,QAAQlB,MAAOK,KAAKJ,MAAMH,MAAOqB,SAAUd,KAAKV,iBAI5E,4BAAQyB,QAAS,kBAAM,EAAKL,qBAAqBM,GAAG,SAASJ,KAAK,SAASjB,MAAM,cAAjF,iBAEA,6BACKK,KAAKJ,MAAMC,OAAOoB,QAAQ,IAAM,IAAIA,QAAQ,IAAM,U,GAtD1C7B,a,MCqBV8B,MApBf,WACE,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAClB,yBAAKQ,IAAKC,IAAMC,OAAO,UACrB,6CASA,kBAAC,EAAD,SCRYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBEnInBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.da8c05b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Component} from 'react';\r\n\r\nclass Input extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { input: '' };\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ input: event.target.value });\r\n      };\r\n\r\n    render() {\r\n        {this.getInput()}\r\n        return (\r\n            <div>\r\n            <form>\r\n                <label>\r\n                Input:\r\n                <input type=\"text\" name=\"input\" value={this.state.input} onChange={this.handleChange} />\r\n               </label>\r\n                 <input type=\"submit\" value=\"Submit\" />\r\n            </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getInput() {\r\n        console.log(this.state.input);\r\n        return this.state.input;\r\n    }\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport Input from './Input.js';\r\nimport ReactDOM from \"react-dom\";\r\nimport {Component} from 'react';\r\n\r\nclass Background extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            input: \"\",\r\n            output: ''\r\n        };\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({ input: event.target.value });\r\n      };\r\n\r\n\r\n    getInput() {\r\n        console.log(this.state.input);\r\n        return this.state.input;\r\n    }\r\n\r\n    getURL() {\r\n        this.getInput()\r\n        let urlstr = 'https://api.funtranslations.com/translate/yoda.json?text='+this.state.input;\r\n        let urlstr2 = 'https://api.funtranslations.com/translate/yoda.json?text=\"'+this.state.input+\"\\\"\";\r\n        console.log(urlstr)\r\n        return urlstr2;\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const response = await\r\n        fetch(this.getURL())\r\n        const json = await response.json();\r\n        // if {json.error} == null:\r\n\r\n        this.setState({ output: json.contents.translated });\r\n    }\r\n\r\n    buttons() {\r\n        this.componentDidMount()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"output\">\r\n            <div>\r\n            <form>\r\n                <label>\r\n                Type here!<br></br>\r\n                <input type=\"text\" name=\"input\" value={this.state.input} onChange={this.handleChange} />\r\n               </label>\r\n               \r\n            </form>\r\n            <button onClick={() => this.componentDidMount()} id=\"button\" type=\"submit\" value=\"Translate!\"> Translate! </button>\r\n            </div>\r\n            <div>\r\n                {this.state.output.replace('\\\"', '').replace('\\\"', '')}\r\n            </div>\r\n            \r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Background;","import React from 'react';\nimport Yoda from './yoda.png';\nimport Input from './Input.js';\nimport Background from './Background.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <img src={Yoda} height=\"100px\"/>\n        <p>\n          Talk like YOda\n        </p>\n        {/* <form>\n         Input:\n         <input type=\"text\" name=\"firstname\"></input>\n         <br></br>\n         <input type=\"submit\" value=\"Submit\"></input>\n        </form> */}\n        <Background/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/yoda.ee7491da.png\";"],"sourceRoot":""}